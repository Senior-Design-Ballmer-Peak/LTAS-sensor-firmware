#include <stdio.h>
#include <string.h>

#include "esp_log.h"
#include "driver/i2c.h"
#include "bme280.h"
#include "icm20948.h"
#include "driver/spi_master.h"
#include "rf69.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#define I2C_MASTER_SCL_IO  22        /*!< gpio number for I2C master clock */
#define I2C_MASTER_SDA_IO  21        /*!< gpio number for I2C master data  */
#define I2C_MASTER_NUM     I2C_NUM_0 /*!< I2C port number for master dev */
#define I2C_MASTER_FREQ_HZ 33500    /*!< I2C master clock frequency */
#define I2C_MASTER_ACK 0 /**/
#define I2C_MASTER_NACK 1 /**/

#define PIN_NUM_MOSI 23 /**/
#define PIN_NUM_MISO 19 /**/
#define PIN_NUM_CLK 18 /**/
#define SPI_DMA_CHAN_NONE 0 /**/

#define TAG_BME280 "BME280" /**/
#define TAG_ICM20948 "ICM20948" /**/
#define TAG_RF69 "RF69" /**/

static const char *TAG = "test";

static const char *TAG1 = "gyro test";
static const char *TAG2 = "accel test";
static icm20948_handle_t icm20948 = NULL;

void tx_task(void *pvParameter)
{
	ESP_LOGI(pcTaskGetName(NULL), "Start");
	int packetnum = 0;	// packet counter, we increment per xmission
	while(1) {

		char radiopacket[64] = "Hello World #";
		sprintf(radiopacket, "Hello World #%d", packetnum++);
		ESP_LOGI(pcTaskGetName(NULL), "Sending %s", radiopacket);
  
		// Send a message!
		send((uint8_t *)radiopacket, strlen(radiopacket));
		waitPacketSent();

		// Now wait for a reply
		uint8_t buf[RH_RF69_MAX_MESSAGE_LEN];
		uint8_t len = sizeof(buf);

		if (waitAvailableTimeout(500))	{
			// Should be a reply message for us now   
			if (recv(buf, &len)) {
				ESP_LOGI(pcTaskGetName(NULL), "Got a reply: %s", (char*)buf);
			} else {
				ESP_LOGE(pcTaskGetName(NULL), "Receive failed");
			}
		} else {
			ESP_LOGE(pcTaskGetName(NULL), "No reply, is another RFM69 listening?");
		}
		vTaskDelay(1000/portTICK_PERIOD_MS);
	} // end while

	// never reach here
	vTaskDelete( NULL );
}


void app_main(void)
{
	ESP_LOGI(TAG, "App main started");

    // Initialize RFM69 radio
    if (!init()) {
        ESP_LOGE(TAG, "RFM69 radio initialization failed");
        return;
    }
    ESP_LOGI(TAG, "RFM69 radio initialization successful");

    // Set RFM69 radio frequency
    float freq = 915.0;
    ESP_LOGI(TAG, "Setting frequency to %.1fMHz", freq);
    if (!setFrequency(freq)) {
        ESP_LOGE(TAG, "Failed to set frequency");
        return;
    }
    ESP_LOGI(TAG, "Frequency set successfully");

	BaseType_t task_created;
    task_created = xTaskCreate(&tx_task, "tx_task", 2048, NULL, 3, NULL);
	if(task_created != pdPASS) {
		ESP_LOGE(TAG, "Task creation failed!");
		while(1) { vTaskDelay(1); } // Halt execution
	}
}